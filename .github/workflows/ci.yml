name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint-and-quality:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Black (formatting check)
      run: |
        black --check --diff src/ main.py sound_generation/
      continue-on-error: true  # Don't fail the build, just report
    
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff src/ main.py sound_generation/
      continue-on-error: true
    
    - name: Run Flake8 (linting)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security-scan:
    name: Security and Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Safety (check for known security vulnerabilities)
      run: |
        safety scan --json --continue-on-error
      continue-on-error: true
    
    - name: Run Bandit (security linter)
      run: |
        bandit -r src/ --exclude B311 -f json -o bandit-report.json || true
        bandit -r src/ --exclude B311 -f screen || true
      continue-on-error: true
    
    - name: Run pip-audit (vulnerability scanner)
      run: |
        pip-audit --desc
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  dependency-check:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Check for outdated dependencies
      run: |
        python -m pip install --upgrade pip
        pip list --outdated
    
    - name: Check requirements.txt validity
      run: |
        python -m pip install pip-tools
      continue-on-error: true
    
    - name: License scan
      run: |
        pip install pip-licenses
        pip-licenses --format=markdown --with-urls --output-file=licenses.md
        cat licenses.md
      continue-on-error: true